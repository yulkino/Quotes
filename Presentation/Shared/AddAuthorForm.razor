@using static Application.Status
@using Application.AuthorMediator.Add
@using MediatR
@using Presentation.Data
@inject IMediator _mediator

<div class="rounded-1">
<EditForm Model="@_authorCreationForm" OnSubmit="@AddAuthor">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputText class="text-field__btn" id="name" @bind-Value="@_authorCreationForm.Name" />
    <button class="text-field__btn" type="submit">Submit</button>
</EditForm>        
@{
    if(_message is not null)
    {
        <div class="alert_text">@_message</div>
    }
}
</div>


@code {
    private AuthorCreationForm _authorCreationForm = new();
    private string _message;

    private async Task AddAuthor()
    {
        _message = null;
        if (_authorCreationForm.Name is null)
            return;
        var response = await _mediator.Send(new AddAuthorCommand(_authorCreationForm.Name));
        _message = response.Status switch
        {
            BadInput => "Wrong input!",
            KeyIsOccupied => "Author name is occupied!",
            SuccessCreated => "Success created"
        };
    }
}
